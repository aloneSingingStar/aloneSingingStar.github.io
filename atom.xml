<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aloneSiningStar的博客</title>
  
  <subtitle>砥砺前行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alonesingingstar.github.io/"/>
  <updated>2021-06-28T14:40:25.674Z</updated>
  <id>https://alonesingingstar.github.io/</id>
  
  <author>
    <name>aloneSingingStar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WmRouter</title>
    <link href="https://alonesingingstar.github.io/WmRouter.html"/>
    <id>https://alonesingingstar.github.io/WmRouter.html</id>
    <published>2021-06-28T07:43:31.000Z</published>
    <updated>2021-06-28T14:40:25.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ServiceLoader"><a href="#ServiceLoader" class="headerlink" title="ServiceLoader"></a>ServiceLoader</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul><li><p>初始化ServiceLoader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ServiceLoader.lazyInit();</div></pre></td></tr></table></figure></li><li><p>定义接口以及实现类，并添加@RouterService注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEmvParamService</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@RouterService</span>(interfaces = IEmvParamService.class,key = ConfigServiceConstant.CONFIGSERVICE_EMVPARAM,singleton = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmvParamService</span> <span class="keyword">implements</span> <span class="title">IEmvParamService</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></li><li><p>使用对应服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IEmvParamService service = Router.getService(IEmvParamService.class, ConfigServiceConstant.CONFIGSERVICE_EMVPARAM);</div></pre></td></tr></table></figure></li></ul><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><a id="more"></a><p>1.编译期间，找到所有使用了@RouterService注解的类，使用APT技术生成初始化代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sankuai.waimai.router.generated.service;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceInit_9dce1d5c4961fd1e5216033e23f0dd60</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    ServiceLoader.put(IConfigParamService.class, <span class="string">"configService_config"</span>, ConfigParamService.class, <span class="keyword">true</span>);</div><div class="line">    ServiceLoader.put(IAcquirerIssuerService.class, <span class="string">"configService_acquirer_issuer"</span>, AcquirerIssuerService.class, <span class="keyword">false</span>);</div><div class="line">    ServiceLoader.put(IEmvParamService.class, <span class="string">"configService_emvparam"</span>, EmvParamService.class, <span class="keyword">true</span>);</div><div class="line">    ServiceLoader.put(IModuleInit.class, <span class="string">"init_config"</span>, ConfigInit.class, <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2.应用初始化调用ServiceLoader.lazyInit()时，使用反射调用com.sankuai.waimai.router.generated.service包下的类的init方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyInitHelper sInitHelper = <span class="keyword">new</span> LazyInitHelper(<span class="string">"ServiceLoader"</span>) &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// 反射调用Init类，避免引用的类过多，导致main dex capacity exceeded问题</span></div><div class="line"><span class="comment">//SERVICE_LOADER_INIT=com.sankuai.waimai.router.generated.service.ServiceLoaderInit</span></div><div class="line"><span class="comment">//INIT_METHOD = "init"</span></div><div class="line">                Class.forName(Const.SERVICE_LOADER_INIT)</div><div class="line">                        .getMethod(Const.INIT_METHOD)</div><div class="line">                        .invoke(<span class="keyword">null</span>);</div><div class="line">                Debugger.i(<span class="string">"[ServiceLoader] init class invoked"</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                Debugger.fatal(e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p><p>3.ServiceLoader.put方法逻辑，ServiceLoader内部维护了2级HashMap，通过2级HashMap实现了如下绑定关系<br>1.第一级HashMap绑定接口与ServiceLoader实例<br>loader = new ServiceLoader(IEmvParamService.class);<br>map1(IEmvParamService.class,loader)<br>2.第二级HashMap则是由接口对应的loader实例去调用，完成key与ServiceImpl的绑定<br>loader.putImpl(key, implementClass, singleton)<br>map2(“configService_emvparam”,new ServiceImpl(“configService_emvparam”, EmvParamService.class, true))<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 提供给InitClass使用的初始化接口</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> interfaceClass 接口类</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> implementClass 实现类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Class interfaceClass, String key, Class implementClass, <span class="keyword">boolean</span> singleton)</span> </span>&#123;</div><div class="line">        ServiceLoader loader = SERVICES.get(interfaceClass);</div><div class="line">        <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</div><div class="line">            loader = <span class="keyword">new</span> ServiceLoader(interfaceClass);</div><div class="line">            SERVICES.put(interfaceClass, loader);</div><div class="line">        &#125;</div><div class="line">        loader.putImpl(key, implementClass, singleton);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putImpl</span><span class="params">(String key, Class implementClass, <span class="keyword">boolean</span> singleton)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; implementClass != <span class="keyword">null</span>) &#123;</div><div class="line">            mMap.put(key, <span class="keyword">new</span> ServiceImpl(key, implementClass, singleton));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class, ServiceLoader&gt; SERVICES = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="keyword">private</span> HashMap&lt;String, ServiceImpl&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">`</div></pre></td></tr></table></figure></p><p>4.使用Router.getService(IEmvParamService.class, ConfigServiceConstant.CONFIGSERVICE_EMVPARAM);时先通过一级HashMap获取接口对应的ServiceLoader实例，再通过二级HashMap获取接口的实现类，然后通过ServiceLoader创建实现类的实例(使用反射创建，如果是单例，还会缓存到对象池中)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;I, T extends I&gt; <span class="function">T <span class="title">getService</span><span class="params">(Class&lt;I&gt; clazz, String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServiceLoader.load(clazz).get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ServiceLoader&lt;T&gt; <span class="title">load</span><span class="params">(Class&lt;T&gt; interfaceClass)</span> </span>&#123;</div><div class="line">        sInitHelper.ensureInit();</div><div class="line">        <span class="keyword">if</span> (interfaceClass == <span class="keyword">null</span>) &#123;</div><div class="line">            Debugger.fatal(<span class="keyword">new</span> NullPointerException(<span class="string">"ServiceLoader.load的class参数不应为空"</span>));</div><div class="line">            <span class="keyword">return</span> EmptyServiceLoader.INSTANCE;</div><div class="line">        &#125;</div><div class="line">        ServiceLoader service = SERVICES.get(interfaceClass);</div><div class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (SERVICES) &#123;</div><div class="line">                service = SERVICES.get(interfaceClass);</div><div class="line">                <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</div><div class="line">                    service = <span class="keyword">new</span> ServiceLoader(interfaceClass);</div><div class="line">                    SERVICES.put(interfaceClass, service);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> service;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建指定key的实现类实例，使用 &#123;<span class="doctag">@link</span> RouterProvider&#125; 方法或无参数构造。对于声明了singleton的实现类，不会重复创建实例。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 可能返回null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> &lt;T extends I&gt; <span class="function">T <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> createInstance(mMap.get(key), <span class="keyword">null</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>5.List<iemvparamservice> allServices = Router.getAllServices(IEmvParamService.class)时，通过接口IEmvParamService.class从一级HashMap中获取对应的ServiceLoader实例,然后再遍历ServiceLoader实例中的二级HashMap的value。每一个value对应一个实例【注意，从putImpl的源码可知，虽然实现同一个接口，但是不同的实现一定要指定唯一的一个key,否则会覆盖二级HashMap中的value】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;I, T extends I&gt; <span class="function">List&lt;T&gt; <span class="title">getAllServices</span><span class="params">(Class&lt;I&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServiceLoader.load(clazz).getAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;T extends I&gt; <span class="function">List&lt;T&gt; <span class="title">getAll</span><span class="params">(IFactory factory)</span> </span>&#123;</div><div class="line">        Collection&lt;ServiceImpl&gt; services = mMap.values();</div><div class="line">        <span class="keyword">if</span> (services.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> Collections.emptyList();</div><div class="line">        &#125;</div><div class="line">        List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(services.size());</div><div class="line">        <span class="keyword">for</span> (ServiceImpl impl : services) &#123;</div><div class="line">            T instance = createInstance(impl, factory);</div><div class="line">            <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">                list.add(instance);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></iemvparamservice></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ServiceLoader&quot;&gt;&lt;a href=&quot;#ServiceLoader&quot; class=&quot;headerlink&quot; title=&quot;ServiceLoader&quot;&gt;&lt;/a&gt;ServiceLoader&lt;/h2&gt;&lt;h3 id=&quot;使用步骤&quot;&gt;&lt;a href=&quot;#使用步骤&quot; class=&quot;headerlink&quot; title=&quot;使用步骤&quot;&gt;&lt;/a&gt;使用步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化ServiceLoader&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ServiceLoader.lazyInit();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义接口以及实现类，并添加@RouterService注解&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IEmvParamService&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RouterService&lt;/span&gt;(interfaces = IEmvParamService.class,key = ConfigServiceConstant.CONFIGSERVICE_EMVPARAM,singleton = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EmvParamService&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IEmvParamService&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用对应服务&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;IEmvParamService service = Router.getService(IEmvParamService.class, ConfigServiceConstant.CONFIGSERVICE_EMVPARAM);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原理分析&quot;&gt;&lt;a href=&quot;#原理分析&quot; class=&quot;headerlink&quot; title=&quot;原理分析&quot;&gt;&lt;/a&gt;原理分析&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Glide</title>
    <link href="https://alonesingingstar.github.io/Glide.html"/>
    <id>https://alonesingingstar.github.io/Glide.html</id>
    <published>2021-06-27T08:28:01.000Z</published>
    <updated>2021-06-28T14:43:06.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Glide生命周期管理"><a href="#Glide生命周期管理" class="headerlink" title="Glide生命周期管理"></a>Glide生命周期管理</h2><a id="more"></a><h2 id="Glide缓存实现"><a href="#Glide缓存实现" class="headerlink" title="Glide缓存实现"></a>Glide缓存实现</h2><p>二级内存缓存 + LRU磁盘缓存</p><h3 id="弱引用实现"><a href="#弱引用实现" class="headerlink" title="弱引用实现"></a>弱引用实现</h3><p>第一级实现：WeakReference + ReferenceQueue<br>ActiveResources<br>Map<key, resourceweakreference=""> activeEngineResources = new HashMap&lt;&gt;();<br>ReferenceQueue<engineresource<?>&gt; resourceReferenceQueue = new ReferenceQueue&lt;&gt;();</engineresource<?></key,></p><p>内部启动了一个监控GC回收资源的线程，调用resourceReferenceQueue的remove方法，阻塞住，当被ResourceWeakReference持有的对象可达性发生变化(即即将被GC前)，会把对应的引用添加到resourceReferenceQueue队列，重新构建一个EngineResource对象，再次加入到LruCache中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (!isShutdown) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        ResourceWeakReference ref = (ResourceWeakReference) resourceReferenceQueue.remove();</div><div class="line">        cleanupActiveReference(ref);</div><div class="line"></div><div class="line">        <span class="comment">// This section for testing only.</span></div><div class="line">        DequeuedResourceCallback current = cb;</div><div class="line">        <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">          current.onResourceDequeued();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// End for testing only.</span></div><div class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        Thread.currentThread().interrupt();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cleanupActiveReference</span><span class="params">(@NonNull ResourceWeakReference ref)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      activeEngineResources.remove(ref.key);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!ref.isCacheable || ref.resource == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EngineResource&lt;?&gt; newResource =</div><div class="line">        <span class="keyword">new</span> EngineResource&lt;&gt;(</div><div class="line">            ref.resource, <span class="comment">/*isMemoryCacheable=*/</span> <span class="keyword">true</span>, <span class="comment">/*isRecyclable=*/</span> <span class="keyword">false</span>, ref.key, listener);</div><div class="line">    listener.onResourceReleased(ref.key, newResource);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><h3 id="第二级实现：LruCache"><a href="#第二级实现：LruCache" class="headerlink" title="第二级实现：LruCache"></a>第二级实现：LruCache</h3><p>Lru背景知识<br>缓存的⼤⼩有限，当缓存被⽤满时，哪些数据应该被清理出去，哪些数据应该被保留？这就 需要缓存淘汰策略来决定。常⻅的策略有三种：先进先出策略FIFO（First In，First Out）、 最少使⽤策略LFU（Least Frequently Used）、最近最少使⽤策略LRU（Least Recently Used）。</p><p>简单的LRU实现思路<br>维护⼀个有序单链表，越靠近链表尾部的结点是越早之前访问的。 当有⼀个新的数据被访问时，我们从链表头开始顺序遍历链表。<br>1.如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来 的位置删除，然后再插⼊到链表的头部。<br>2.如果此数据没有在缓存链表中，⼜可以分为两种情况：<br>如果此时缓存未满，则将此结点直接插⼊到链表的头部；<br>如果此时缓存已满，则链表尾结点删除，将新的数据结点插⼊链表的头部。</p><p>使用数组可以实现，但是无法达到O(1)；<br>使用单向链表也可以实现，但是也无法达到O(1)，因为get无法达到O(1)<br>想要get达到O(1),可以使用哈希表，但是想要将缓存命中的处于链表中间的节点移动到头部，然后将该节点前后的元素连接起来时，获取该节点前一个元素还得再遍历一遍，为解决这个问题，可以使用双向链表。</p><p>LinkedHashMap已经实现LRU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">private EngineResource&lt;?&gt; loadFromCache(Key key) &#123;</div><div class="line">    EngineResource&lt;?&gt; cached = getEngineResourceFromCache(key);</div><div class="line">    if (cached != null) &#123;</div><div class="line">      cached.acquire();</div><div class="line">      activeResources.activate(key, cached);</div><div class="line">    &#125;</div><div class="line">    return cached;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">LruResourceCache extends LruCache&lt;Key, Resource&lt;?&gt;&gt;</div><div class="line"></div><div class="line">private final Map&lt;T, Entry&lt;Y&gt;&gt; cache = new LinkedHashMap&lt;&gt;(100, 0.75f, true);</div><div class="line">//accessOrder=true表示按访问(包含put,get操作)顺便插入元素,即最后一次访问的元素放在链表最后</div><div class="line">public LinkedHashMap(int initialCapacity,</div><div class="line">                         float loadFactor,</div><div class="line">                         boolean accessOrder)</div><div class="line">举例：</div><div class="line">LinkedHashMap&lt;String,String&gt; map = new LinkedHashMap&lt;&gt;(10,0.75f,true);</div><div class="line">        map.put(&quot;a&quot;,&quot;a&quot;);</div><div class="line">        map.put(&quot;b&quot;,&quot;b&quot;);</div><div class="line">        map.put(&quot;c&quot;,&quot;c&quot;);</div><div class="line">        map.put(&quot;d&quot;,&quot;d&quot;);</div><div class="line">        String a = map.get(&quot;a&quot;);</div><div class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</div><div class="line">        for (Map.Entry&lt;String, String&gt; item : entries)&#123;</div><div class="line">            System.out.println(item.getValue());</div><div class="line">        &#125;</div><div class="line">结果：b c d a</div></pre></td></tr></table></figure><h3 id="第三级实现"><a href="#第三级实现" class="headerlink" title="第三级实现"></a>第三级实现</h3><p>DiskLruCache<br>DiskLruCache的核心是journal文件，每次操作都会在journal文件中做一次记录。</p><p>写入缓存的时候会向journal文件写入一条以DIRTY开头的数据表示正在进行写操作，当写入完毕时，分两种情况：1、写入成功，会向journal文件写入一条以CLEAN开头的文件，其中包括该文件的大小。 2、写入失败，会向journal文件写入一条以REMOVE开头的文件,表示删除了该条缓存。也就是说每次写入缓存总是写入两条操作记录。</p><p>读取的时候，会向journal文件写入一条以READ开头的文件,表示进行了读操作</p><p>删除的时候，会向journal文件写入一条以REMOVE开头的文件,表示删除了该条缓存</p><p>通过journal就记录了所有对缓存的操作。并且按照从上到下的读取顺序记录了对所有缓存的操作频繁度和时间顺序。这样当退出程序再次进来调用缓存时，就可以读取这个文件来知道哪些缓存用的比较频繁了。然后把这些操作记录读取到集合中，操作的时候就可以直接从集合中去对应的数据了。</p><h2 id="Glide并发管理"><a href="#Glide并发管理" class="headerlink" title="Glide并发管理"></a>Glide并发管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor.<span class="function">Builder <span class="title">newSourceBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GlideExecutor.Builder(<span class="comment">/*preventNetworkOperations=*/</span> <span class="keyword">false</span>)</div><div class="line">        .setThreadCount(calculateBestThreadCount())</div><div class="line">        .setName(DEFAULT_SOURCE_EXECUTOR_NAME);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//MAXIMUM_AUTOMATIC_THREAD_COUNT = 4</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateBestThreadCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bestThreadCount == <span class="number">0</span>) &#123;</div><div class="line">      bestThreadCount =</div><div class="line">          Math.min(MAXIMUM_AUTOMATIC_THREAD_COUNT, RuntimeCompat.availableProcessors());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bestThreadCount;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** Shortcut for calling &#123;<span class="doctag">@link</span> Builder#build()&#125; on &#123;<span class="doctag">@link</span> #newSourceBuilder()&#125;. */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor <span class="title">newSourceExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> newSourceBuilder().build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//DEFAULT_DISK_CACHE_EXECUTOR_THREADS = 1</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor.<span class="function">Builder <span class="title">newDiskCacheBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GlideExecutor.Builder(<span class="comment">/*preventNetworkOperations=*/</span> <span class="keyword">true</span>)</div><div class="line">        .setThreadCount(DEFAULT_DISK_CACHE_EXECUTOR_THREADS)</div><div class="line">        .setName(DEFAULT_DISK_CACHE_EXECUTOR_NAME);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** Shortcut for calling &#123;<span class="doctag">@link</span> Builder#build()&#125; on &#123;<span class="doctag">@link</span> #newDiskCacheBuilder()&#125;. */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor <span class="title">newDiskCacheExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> newDiskCacheBuilder().build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor.<span class="function">Builder <span class="title">newAnimationBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> bestThreadCount = calculateBestThreadCount();</div><div class="line">    <span class="comment">// We don't want to add a ton of threads running animations in parallel with our source and</span></div><div class="line">    <span class="comment">// disk cache executors. Doing so adds unnecessary CPU load and can also dramatically increase</span></div><div class="line">    <span class="comment">// our maximum memory usage. Typically one thread is sufficient here, but for higher end devices</span></div><div class="line">    <span class="comment">// with more cores, two threads can provide better performance if lots of GIFs are showing at</span></div><div class="line">    <span class="comment">// once.</span></div><div class="line">    <span class="keyword">int</span> maximumPoolSize = bestThreadCount &gt;= <span class="number">4</span> ? <span class="number">2</span> : <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GlideExecutor.Builder(<span class="comment">/*preventNetworkOperations=*/</span> <span class="keyword">true</span>)</div><div class="line">        .setThreadCount(maximumPoolSize)</div><div class="line">        .setName(DEFAULT_ANIMATION_EXECUTOR_NAME);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** Shortcut for calling &#123;<span class="doctag">@link</span> Builder#build()&#125; on &#123;<span class="doctag">@link</span> #newAnimationBuilder()&#125;. */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor <span class="title">newAnimationExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> newAnimationBuilder().build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> GlideExecutor <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (TextUtils.isEmpty(name)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"Name must be non-null and non-empty, but given: "</span> + name);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//corePoolSize == maximumPoolSize == setThreadCount()方法传入的值</span></div><div class="line">      ThreadPoolExecutor executor =</div><div class="line">          <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">              corePoolSize,</div><div class="line">              maximumPoolSize,</div><div class="line">              <span class="comment">/*keepAliveTime=*/</span> threadTimeoutMillis,</div><div class="line">              TimeUnit.MILLISECONDS,</div><div class="line">              <span class="keyword">new</span> PriorityBlockingQueue&lt;Runnable&gt;(),</div><div class="line">              <span class="keyword">new</span> DefaultThreadFactory(name, uncaughtThrowableStrategy, preventNetworkOperations));</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (threadTimeoutMillis != NO_THREAD_TIMEOUT) &#123;</div><div class="line">        executor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> GlideExecutor(executor);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>Glide加载缓存未命中的线程池会根据根据CPU的数量和Java虚拟机中可用的处理器数量来选择合适的线程数，但是最多不超过4;而加载缓存命中的图片的线程池默认大小为1.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Glide生命周期管理&quot;&gt;&lt;a href=&quot;#Glide生命周期管理&quot; class=&quot;headerlink&quot; title=&quot;Glide生命周期管理&quot;&gt;&lt;/a&gt;Glide生命周期管理&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AQS</title>
    <link href="https://alonesingingstar.github.io/AQS.html"/>
    <id>https://alonesingingstar.github.io/AQS.html</id>
    <published>2021-06-20T06:43:27.000Z</published>
    <updated>2021-06-28T14:43:29.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AQS独占锁与共享锁"><a href="#AQS独占锁与共享锁" class="headerlink" title="AQS独占锁与共享锁"></a>AQS独占锁与共享锁</h2><a id="more"></a><h2 id="AQS阻塞队列与条件队列"><a href="#AQS阻塞队列与条件队列" class="headerlink" title="AQS阻塞队列与条件队列"></a>AQS阻塞队列与条件队列</h2><h3 id="AQS阻塞队列"><a href="#AQS阻塞队列" class="headerlink" title="AQS阻塞队列"></a>AQS阻塞队列</h3><p>双向链表<br>ReentrantLock</p><h3 id="AQS条件队列"><a href="#AQS条件队列" class="headerlink" title="AQS条件队列"></a>AQS条件队列</h3><p>对应AbstractQueuedSynchronizer的内部类ConditionObject implements Condition,每一个ConditionObject对象，都会维护一个单向链表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Lock lock = new ReentrantLock();</div><div class="line">Condition provider = lock.newCondition();</div><div class="line">Condition consumer = lock.newCondition();</div><div class="line">//此处如果获取锁失败，会调用acquireQueued(addWaiter(Node.EXCLUSIVE),arg)将当前线程以Node节点加入同步队列，自旋获取锁，没获取到则阻塞</div><div class="line">lock.lock();</div><div class="line">//能到这一步的前提是上一步已经成功获取锁，即没有加入同步队列，此处调用await()会将当前线程以Node节点加入条件队列，并且释放锁。</div><div class="line">provider.await();</div><div class="line">consumer.signalAll();</div></pre></td></tr></table></figure></p><p>ReentrantReadWriteLock</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AQS独占锁与共享锁&quot;&gt;&lt;a href=&quot;#AQS独占锁与共享锁&quot; class=&quot;headerlink&quot; title=&quot;AQS独占锁与共享锁&quot;&gt;&lt;/a&gt;AQS独占锁与共享锁&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://alonesingingstar.github.io/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"/>
    <id>https://alonesingingstar.github.io/线程池.html</id>
    <published>2021-06-16T14:18:48.000Z</published>
    <updated>2021-06-27T06:56:51.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程池优点："><a href="#线程池优点：" class="headerlink" title="线程池优点："></a>线程池优点：</h2><p><strong>降低资源消耗：</strong> 通过重复利用已创建的线程降低线程<strong>创建</strong>和<strong>销毁</strong>的消耗<br><strong>提高响应速度：</strong> 当任务到达时，任务可以不需要等待线程创建就能立即执行(线程复用/线程预热prestartAllCoreThreads、prestartCoreThread)<br><strong>提高线程的可管理性：</strong> 线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会降低系统的稳定性（线程切换的开销），使用线程池可以进行统一的分配，调优和监控。</p><h3 id="ThreadPoolExecutor构造方法"><a href="#ThreadPoolExecutor构造方法" class="headerlink" title="ThreadPoolExecutor构造方法"></a>ThreadPoolExecutor构造方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,</div><div class="line">TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,</div><div class="line">RejectedExecutionHandler handler)</div></pre></td></tr></table></figure><p>corePoolSize:核心线程数大小<br>maximumPoolSize:最大线程数大小(maximumPoolSize-corePoolSize的值为非核心线程数大小)<br>keepAliveTime:非核心线程在执行完任务后，等待下一个任务的时间，超过这个时间则会销毁<br>workQueue:用来暂时保存任务的阻塞队列<br>threadFactory:用于创建工作线程的工厂，比如可以在这里给线程命名<br>handler:任务拒绝策略（线程池非RUNNING状态/阻塞队列已经满，线程池线程数量达到maximumPoolSize）</p><h2 id="自带线程池创建方式分析"><a href="#自带线程池创建方式分析" class="headerlink" title="自带线程池创建方式分析"></a>自带线程池创建方式分析</h2><h3 id="Executors-newFixedThreadPool-int-nThreads"><a href="#Executors-newFixedThreadPool-int-nThreads" class="headerlink" title="Executors.newFixedThreadPool(int nThreads)"></a>Executors.newFixedThreadPool(int nThreads)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(nThreads,nThreads,0,TimeUnit.MILLISECONDS,new LinkedBlockingQueue&lt;Runnable&gt;())</div></pre></td></tr></table></figure><a id="more"></a><p>假设指定mThreads = 10<br>1.主线程执行execute<br>2.执行workerCountOf(c) &lt; corePoolSize(10)，条件成立<br>3.执行addWorker(command, true),创建一个Worker(extends AbstractQueuedSynchronizer implements Runnable),Worker内部维护了一个Thread线程执行任务,thread启动时，会调用Worker覆写的run方法，最终调用runWorker(this)<br>4.进入runWorker(this)后，执行当前task后，将task置为null,然后进入getTask();<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(task != <span class="keyword">null</span> || (task = getTask())!= <span class="keyword">null</span>)&#123;</div><div class="line">    task.run();</div><div class="line">    task = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>5.进入getTask()后，执行workQueue.take()，即执行LinkedBlockingQueue的take方法，默认是非公平模式（且无法指定为公平模式），然后线程会阻塞在notEmpty.await()方法中。<br>6.当工作线程数为10，不满足workerCountOf(c) &lt; corePoolSize(10),执行isRunning(c) &amp;&amp; workQueue.offer(command)，即调用LinkedBlockingQueue的offer方法，执行enqueue(node)后，notFull.signal()通知队列未满，notEmpty.signal()通知正在等待的线程，某个等待的线程收到通知后，继续执行take()方法中的dequeue(),并且判断如果队列中还堆积了任务，则再次调用notEmpty.signal()通知其他正在等待的线程，最终返回当前取到的task,回到runWoker(this)中执行task.run()。</p><h3 id="Executors-newSingleThreadPool"><a href="#Executors-newSingleThreadPool" class="headerlink" title="Executors.newSingleThreadPool()"></a>Executors.newSingleThreadPool()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(1,1,0,TimeUnit.MILLISECONDS,new LinkedBlockingQueue&lt;Runnable&gt;())</div></pre></td></tr></table></figure><h3 id="Executors-newCachedThreadPool"><a href="#Executors-newCachedThreadPool" class="headerlink" title="Executors.newCachedThreadPool()"></a>Executors.newCachedThreadPool()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new  SynchronousQueue&lt;Runnable&gt;())</div></pre></td></tr></table></figure><p>1.主线程执行execute<br>2.执行workerCountOf(c) &lt; corePoolSize(0)，条件不成立。<br>3.执行isRunning(c) &amp;&amp; workQueue.offer(command)，即调用SynchronousQueue的offer方法，默认是非公平模式，调用TransferStack的transfer方法，transferer.transfer(e, true, 0),满足if (timed &amp;&amp; nanos &lt;= 0)，返回null,最终SynchronousQueue的offer返回false,条件不成立。<br>4.执行!addWorker(command, false)，即调用addWorker(command, false),创建一个Worker(extends AbstractQueuedSynchronizer implements Runnable),Worker内部维护了一个Thread线程执行任务,thread启动时，会调用Worker覆写的run方法，最终调用runWorker(this)（此线程为非核心线程，在执行完任务后，会等待60秒，超时后，会被销毁）<br>5.进入runWorker(this)后，执行当前task后，将task置为null,然后进入getTask();<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(task != <span class="keyword">null</span> || (task = getTask())!= <span class="keyword">null</span>)&#123;</div><div class="line">    task.run();</div><div class="line">    task = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>6.进入getTask()后，执行workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)，即执行SynchronousQueue的poll方法，默认是非公平模式，调用TransferStack的transfer方法，transferer.transfer(null, true, unit.toNanos(timeout)),unit.toNanos(timeout)值为60000,满足else if (casHead(h, s = snode(s, e, h, mode)))，然后线程会阻塞在awaitFulfill方法中。<br>    6.1 如果等待超时，最终会回到runWorker(this)中的processWorkerExit(w, completedAbruptly);线程执行结束，即被销毁。<br>    6.2，没有超时，此时第二个任务进入。进入7<br>7.主线程执行execute<br>8.执行workerCountOf(c) &lt; corePoolSize(0)，条件不成立。<br>9.执行isRunning(c) &amp;&amp; workQueue.offer(command)，即调用SynchronousQueue的offer方法，默认是非公平模式，调用TransferStack的transfer方法，transferer.transfer(e, true, 0),满足else if (!isFulfilling(h.mode))，执行else if (casHead(h, s=snode(s, e, h, FULFILLING|mode)))中的m.tryMatch(s)，最终返回匹配的task,回到runWoker(this)中执行task.run()</p><h2 id="线程池主要处理流程分析"><a href="#线程池主要处理流程分析" class="headerlink" title="线程池主要处理流程分析"></a>线程池主要处理流程分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Proceed in 3 steps:</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></div><div class="line"><span class="comment">         * start a new thread with the given command as its first</span></div><div class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></div><div class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></div><div class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></div><div class="line"><span class="comment">         * to double-check whether we should have added a thread</span></div><div class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></div><div class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></div><div class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></div><div class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></div><div class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></div><div class="line"><span class="comment">         * and so reject the task.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            c = ctl.get();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">                reject(command);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</div><div class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">            reject(command);</div></pre></td></tr></table></figure><h2 id="工作线程Worker分析"><a href="#工作线程Worker分析" class="headerlink" title="工作线程Worker分析"></a>工作线程Worker分析</h2><h2 id="submit-Runnable-runnable-与execute-Runnable-runnable"><a href="#submit-Runnable-runnable-与execute-Runnable-runnable" class="headerlink" title="submit(Runnable runnable)与execute(Runnable runnable)"></a>submit(Runnable runnable)与execute(Runnable runnable)</h2><p>提交到submit的runnable任务<strong>每次</strong>都会被包装成FutureTask</p><p>区别点一：<br>执行100次submit，runnable.toString()得到100个不同的对象。<br>执行100次execute, runnable.toString()得到是同一个对象。</p><p>区别点二：<br>提交到submit的runnable任务，最终执行的是FutureTask的run方法。异常被捕获。应用无法获取异常日志，所以要么用get拉取异常处理，要么自己写try catch把任务执行的逻辑包起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">FutureTask的run方法</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">            Callable&lt;V&gt; c = callable;</div><div class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</div><div class="line">                V result;</div><div class="line">                <span class="keyword">boolean</span> ran;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    result = c.call();</div><div class="line">                    ran = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">                    result = <span class="keyword">null</span>;</div><div class="line">                    ran = <span class="keyword">false</span>;</div><div class="line">                    setException(ex);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (ran)</div><div class="line">                    set(result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">用get拉取异常</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Runnable r, Throwable t)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.afterExecute(r, t);</div><div class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">                    t.printStackTrace();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (r <span class="keyword">instanceof</span> Future&lt;?&gt;) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            <span class="comment">//get这里会首先检查任务的状态，然后将上面的异常包装成ExecutionException</span></div><div class="line">                            Object result = ((Future&lt;?&gt;) r).get();</div><div class="line">                        &#125; <span class="keyword">catch</span> (CancellationException ce) &#123;</div><div class="line">                            t = ce;</div><div class="line">                        &#125; <span class="keyword">catch</span> (ExecutionException ee) &#123;</div><div class="line">                            t = ee.getCause();</div><div class="line">                            t.printStackTrace();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">                            Thread.currentThread().interrupt(); <span class="comment">// ignore/reset</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure><h2 id="第三方库中的应用"><a href="#第三方库中的应用" class="headerlink" title="第三方库中的应用"></a>第三方库中的应用</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线程池优点：&quot;&gt;&lt;a href=&quot;#线程池优点：&quot; class=&quot;headerlink&quot; title=&quot;线程池优点：&quot;&gt;&lt;/a&gt;线程池优点：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;降低资源消耗：&lt;/strong&gt; 通过重复利用已创建的线程降低线程&lt;strong&gt;创建&lt;/strong&gt;和&lt;strong&gt;销毁&lt;/strong&gt;的消耗&lt;br&gt;&lt;strong&gt;提高响应速度：&lt;/strong&gt; 当任务到达时，任务可以不需要等待线程创建就能立即执行(线程复用/线程预热prestartAllCoreThreads、prestartCoreThread)&lt;br&gt;&lt;strong&gt;提高线程的可管理性：&lt;/strong&gt; 线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会降低系统的稳定性（线程切换的开销），使用线程池可以进行统一的分配，调优和监控。&lt;/p&gt;
&lt;h3 id=&quot;ThreadPoolExecutor构造方法&quot;&gt;&lt;a href=&quot;#ThreadPoolExecutor构造方法&quot; class=&quot;headerlink&quot; title=&quot;ThreadPoolExecutor构造方法&quot;&gt;&lt;/a&gt;ThreadPoolExecutor构造方法&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			TimeUnit unit,BlockingQueue&amp;lt;Runnable&amp;gt; workQueue,ThreadFactory threadFactory,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			RejectedExecutionHandler handler)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;corePoolSize:核心线程数大小&lt;br&gt;maximumPoolSize:最大线程数大小(maximumPoolSize-corePoolSize的值为非核心线程数大小)&lt;br&gt;keepAliveTime:非核心线程在执行完任务后，等待下一个任务的时间，超过这个时间则会销毁&lt;br&gt;workQueue:用来暂时保存任务的阻塞队列&lt;br&gt;threadFactory:用于创建工作线程的工厂，比如可以在这里给线程命名&lt;br&gt;handler:任务拒绝策略（线程池非RUNNING状态/阻塞队列已经满，线程池线程数量达到maximumPoolSize）&lt;/p&gt;
&lt;h2 id=&quot;自带线程池创建方式分析&quot;&gt;&lt;a href=&quot;#自带线程池创建方式分析&quot; class=&quot;headerlink&quot; title=&quot;自带线程池创建方式分析&quot;&gt;&lt;/a&gt;自带线程池创建方式分析&lt;/h2&gt;&lt;h3 id=&quot;Executors-newFixedThreadPool-int-nThreads&quot;&gt;&lt;a href=&quot;#Executors-newFixedThreadPool-int-nThreads&quot; class=&quot;headerlink&quot; title=&quot;Executors.newFixedThreadPool(int nThreads)&quot;&gt;&lt;/a&gt;Executors.newFixedThreadPool(int nThreads)&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;new ThreadPoolExecutor(nThreads,nThreads,0,TimeUnit.MILLISECONDS,new 					LinkedBlockingQueue&amp;lt;Runnable&amp;gt;())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tigase开发--Tigase服务器搭建</title>
    <link href="https://alonesingingstar.github.io/Tigase%E5%BC%80%E5%8F%91-Tigase%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA.html"/>
    <id>https://alonesingingstar.github.io/Tigase开发-Tigase服务器搭建.html</id>
    <published>2017-09-26T06:52:30.000Z</published>
    <updated>2017-09-27T04:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h3><p><strong>下载地址：</strong> <a href="https://projects.tigase.org/projects/tigase-server/files" target="_blank" rel="external">安装包下载地址</a></p><p><strong>安装包说明：</strong> 不同后缀的安装包对应不同操作系统、或者不同的安装方式，比如tigase-server-7.1.1-b4457-javadoc.jar适用与GUI方式安装(一步步都有图像界面那种)、同样也可以用于ssh远程到服务器，控制台安装。tigase-server-7.1.1-b4457-dist-max.tar.gz适用与WEB页面方式安装等</p><p><strong>安装文档说明：</strong> 一切安装步骤以官方文档为准，可以将下载好的包解压（jar包可以将.jar改为.zip，解压即可看到文档），文档目录在docs目录，比如GUI方式安装的文档路径如下：docs/Administration_Guide/html/index.html#guiinstall<br><a id="more"></a></p><h3 id="2-安装前准备"><a href="#2-安装前准备" class="headerlink" title="2.安装前准备"></a>2.安装前准备</h3><p><strong>安装数据库：</strong> MySQL、PostgreSQL、SQL Server、Derby选一种你想用的</p><p><strong>基本环境:</strong> jdk安装</p><h3 id="3-安装过程需要注意的问题"><a href="#3-安装过程需要注意的问题" class="headerlink" title="3. 安装过程需要注意的问题"></a>3. 安装过程需要注意的问题</h3><p><strong>安装步骤：</strong> 根据你选择的安装方式，查看对应的官方文档，我选择的是最简单的GUI方式，文档路径:docs/Administration_Guide/html/index.html#guiinstall</p><p><strong>注意点1：</strong> Basic Server Configuration（基本服务配置）</p><p><img src="http://alonesingingstar.site/Tigase开发-Tigase服务器搭建/serverConfiguration.gif" alt="ServerConfguration"></p><ul><li>Your XMPP(Jabber) domains:自定义xmpp域名，比如veloci.tigase.org</li><li>Server administrators:管理员账号（在数据库注册的第一个用户），格式为：名称@自定义的域名，比如admin@veloci.tigase.org<br>账户名称必须是：名称@自定义的域名,自定义的域名部门必须与Your XMPP(Jabber) domains中定义的一致，否则登录会报authentication相关的错</li></ul><p><strong>注意点2：</strong> Tigase数据库安装</p><p><img src="http://alonesingingstar.site/Tigase开发-Tigase服务器搭建/tigasedb.jpg" alt="tigasedb"></p><p>成功后，会在本地mysql数据库生成tigasedb数据库，其中可以在tig_users表中看到之前注册的Server administrators:管理员账号(在这个数据库中存在的用户，可以用来登录)</p><h3 id="4-启动Tigase服务，验证安装是否成功"><a href="#4-启动Tigase服务，验证安装是否成功" class="headerlink" title="4.启动Tigase服务，验证安装是否成功"></a>4.启动Tigase服务，验证安装是否成功</h3><p>启动MySQL服务，确保MySQL数据库可连接</p><p>进入安装Tigase后生成的目录，执行：./scripts/tigase.sh start etc/tigase.conf，启动服务</p><p>网页中访问：<a href="http://localhost:8080/ui,如果不能访问，可能是因为安装时，少装了HTTP相关组件，这样的话，就可以安装一个客户端，比如psi来登录验证，在页面中输入：Server" target="_blank" rel="external">http://localhost:8080/ui,如果不能访问，可能是因为安装时，少装了HTTP相关组件，这样的话，就可以安装一个客户端，比如psi来登录验证，在页面中输入：Server</a> administrators:管理员账号、密码，如果能登录进入，说明安装成功，如果不能，请检查安装配置</p><h3 id="5-关于SSL握手证书及Android客户端信任库证书"><a href="#5-关于SSL握手证书及Android客户端信任库证书" class="headerlink" title="5.关于SSL握手证书及Android客户端信任库证书"></a>5.关于SSL握手证书及Android客户端信任库证书</h3><p>安装目录下certs目录中存放着证书，当我们使用第一个用户（一般是管理员）登录时，用户发起SSL连接，服务器会首先检查你是否在certs目录放入【你自定义的域名.pem】格式的证书，如果没有，则生成一个[你自定义的域名.pem]格式的证书，然后发送给客户端，然后由客户端决定是否信任这个证书，比如用PSI客户端登录，会弹出框体，让你查看该证书的详细信息，并且让你决定是否信任证书。而在Android中，则需要我们先在本地生成一个信任库，然后将该服务器证书导入到信任库中，每次登录时，Android客户端先会在信任库中检查是否有该证书，有则信任，不信任，则拒绝连接，这个需要代码来实现。</p><p>自签名证书制作、客户端信任库制作：<br>官方文档：docs/Administration_Guide/html/index.html#ServerCertificates</p><ul><li><p>1.Generate local private key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out[自定义域名.key] 1024</div></pre></td></tr></table></figure></li><li><p>2.Generate a certificate request:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -key 自定义域名.key -out 自定义域名.csr</div></pre></td></tr></table></figure></li></ul><p>这一步会让你填写相关信息，比如所在国家、城市、公司信息等，其中最重要的一点是Common Name,这里填上你自定义的域名，不然客户端登录时会报：Cerificate hostname doesn’t match domain name you want to connect</p><ul><li><p>3.Sign the Certificate Request（self-signing）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -days 365 -in 自定义域名.csr -signkey 自定义域名.key -out 自定义域名.crt</div></pre></td></tr></table></figure></li><li><p>4.Generate PEM file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cat 自定义域名.crt 自定义域名.key &gt; 自定义域名.pem</div><div class="line"></div><div class="line">如果是第三方授权的证书，则需要导入证书链，格式如下，例如，如果您有来自XMPP联盟的证书，则需要下载StartCom根证书和中间ICA证书。</div><div class="line">cat 自定义域名.crt 自定义域名.key sub.class1.xmpp.ca.crt ca.crt &gt; 自定义域名.pem</div></pre></td></tr></table></figure></li><li><p>5.Android客户端生成truststore，并导入受信任的服务器证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">要生成bks证书，需要bcprov-ext-jdk15on-151.jar。且将该文件放到/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/lib目录下。</div><div class="line"></div><div class="line">执行如下命令：</div><div class="line">keytool -importcert -trustcacerts -keystore client_trust.bks -file 自定义域名.crt -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider</div></pre></td></tr></table></figure></li><li><p>6.将生成的bks文件放入Android代码的res/raw文件夹下，然后写代码进行ssl握手</p></li></ul>]]></content>
    
    <summary type="html">
    
      tigase,tigase服务器,xmpp
    
    </summary>
    
      <category term="tigase" scheme="https://alonesingingstar.github.io/categories/tigase/"/>
    
    
      <category term="tigase" scheme="https://alonesingingstar.github.io/tags/tigase/"/>
    
      <category term="xmpp" scheme="https://alonesingingstar.github.io/tags/xmpp/"/>
    
      <category term="tigase服务" scheme="https://alonesingingstar.github.io/tags/tigase%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="https://alonesingingstar.github.io/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://alonesingingstar.github.io/hexo搭建博客.html</id>
    <published>2017-09-10T05:48:42.000Z</published>
    <updated>2021-06-20T06:24:41.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-在github上新建项目："><a href="#1-在github上新建项目：" class="headerlink" title="1.在github上新建项目："></a>1.在github上新建项目：</h3><p><strong>项目名称：</strong>github用户名称.github.io<br>example: aloneSingingStar.github.io</p><p><strong>注意:</strong>最好创建空项目，不带一个文件</p><h3 id="2-本地新建目录"><a href="#2-本地新建目录" class="headerlink" title="2.本地新建目录"></a>2.本地新建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">随意创建，我的是aloneSingingStar.github.io</div></pre></td></tr></table></figure><h3 id="3-进入aloneSingingStar-github-io目录，初始化hexo"><a href="#3-进入aloneSingingStar-github-io目录，初始化hexo" class="headerlink" title="3.进入aloneSingingStar.github.io目录，初始化hexo"></a>3.进入aloneSingingStar.github.io目录，初始化hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><a id="more"></a><h3 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4.安装依赖"></a>4.安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><h3 id="5-安装博客部署插件"><a href="#5-安装博客部署插件" class="headerlink" title="5.安装博客部署插件"></a>5.安装博客部署插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure><h3 id="6-配置-comfig-xml，设置部署分支为master"><a href="#6-配置-comfig-xml，设置部署分支为master" class="headerlink" title="6.配置_comfig.xml，设置部署分支为master"></a>6.配置_comfig.xml，设置部署分支为master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:aloneSingingStar/aloneSingingStar.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure><h3 id="7-将项目添加到github"><a href="#7-将项目添加到github" class="headerlink" title="7.将项目添加到github"></a>7.将项目添加到github</h3><ul><li><p>初始化为git项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure></li><li><p>添加该目录下的所有文件到本地仓库（会根据.ignore文件过滤）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></li><li><p>提交代码到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m ‘初始化hexo’</div></pre></td></tr></table></figure></li><li><p>关联本地仓库代码到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:aloneSingingStar/aloneSingingStar.github.io.git</div></pre></td></tr></table></figure></li><li><p>提交本地仓库代码到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master -f (必须加上-f,而且执行这句后，之前在github上的原有文件会丢失)</div></pre></td></tr></table></figure></li></ul><p>在github上创建项目时，里面有一个readme.md文件，而本地项目git init时，里面没有这个文件，当使用（git push -u origin master）把本地文件提交上，就会有如下问题：<br>To github.com:aloneSingingStar/aloneSingingStar.github.io.git<br> ! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:aloneSingingStar/aloneSingingStar.github.io.git’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p><h3 id="8-在本地和远程创建hexo分支-并且本地切换到hexo分支-并拉取代码"><a href="#8-在本地和远程创建hexo分支-并且本地切换到hexo分支-并拉取代码" class="headerlink" title="8.在本地和远程创建hexo分支,并且本地切换到hexo分支,并拉取代码"></a>8.在本地和远程创建hexo分支,并且本地切换到hexo分支,并拉取代码</h3><ul><li><p>本地仓库创建hexo分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b hexo</div></pre></td></tr></table></figure></li><li><p>推送本地hexo分支到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin hexo</div></pre></td></tr></table></figure></li><li><p>从远程hexo分支拉取代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin hexo</div></pre></td></tr></table></figure></li></ul><p>(从hexo分支拉取代码，git pull无效果，可以git branch –set-upstream-to=origin/hexo(跟踪hexo的流)，并且git branch –unset-upstream master(取消对master的跟踪)，这样的话，就可以直接执行git pull、git push直接提交代码到hexo分支)</p><h3 id="9-启动本地服务器测试"><a href="#9-启动本地服务器测试" class="headerlink" title="9.启动本地服务器测试"></a>9.启动本地服务器测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo server</div><div class="line"></div><div class="line">访问 http://localhost:4000/ 预览效果</div></pre></td></tr></table></figure><h3 id="10-预览没有问题后，执行如下操作部署到github"><a href="#10-预览没有问题后，执行如下操作部署到github" class="headerlink" title="10.预览没有问题后，执行如下操作部署到github"></a>10.预览没有问题后，执行如下操作部署到github</h3><ul><li><p>hexo clean</p></li><li><p>hexo generate</p></li><li><p>hexo deploy</p></li><li><p>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</p></li><li><p>访问<a href="http://aloneSingingStar.github.io">http://aloneSingingStar.github.io</a></p></li></ul><h3 id="11-配置主题"><a href="#11-配置主题" class="headerlink" title="11.配置主题"></a>11.配置主题</h3><p><strong>主题网址：</strong><a href="https://hexo.io/themes/" target="_blank" rel="external">主题网址</a><br>我使用的是yilia,步骤如下：</p><p>1.使用ssh方式克隆项目到themes目录下的yilia目录<br>git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia</p><p>2.修改aloneSingingStar.github.io目录下的_config.yml中的主题<br>theme:yilia</p><p>3.具体样式可以修改yilia目录下的_config.yml文件</p><h3 id="12-配置百度统计（只能后台统计，无法前台展示）"><a href="#12-配置百度统计（只能后台统计，无法前台展示）" class="headerlink" title="12.配置百度统计（只能后台统计，无法前台展示）"></a>12.配置百度统计（只能后台统计，无法前台展示）</h3><ul><li>注册百度统计站长版</li><li><p>注册成功后，会得到一段代码，其中有一段是：hm.src = “<a href="https://hm.baidu.com/hm.js?这里是你的唯一code" target="_blank" rel="external">https://hm.baidu.com/hm.js?这里是你的唯一code</a>;<br>把code填写到yilia主题目录下的_config.yml中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Miscellaneous</div><div class="line">baidu_analytics: &apos;填写你的code&apos;</div><div class="line">google_analytics: false</div></pre></td></tr></table></figure></li><li><p><a href="https://tongji.baidu.com" target="_blank" rel="external">百度统计网址</a></p></li></ul><h3 id="13-配置不蒜子，在网页显示访问量"><a href="#13-配置不蒜子，在网页显示访问量" class="headerlink" title="13.配置不蒜子，在网页显示访问量"></a>13.配置不蒜子，在网页显示访问量</h3><p>我修改的是/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/themes/yilia/layout/_partial/footer.ejs文件<br>其中不蒜子我没有下载到本地，是直接引用的<script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script></p><p>参考的是这个人的配置（<a href="https://github.com/sssvip/blog-data/blob/master/themes/yilia/layout/_partial/footer.ejs）" target="_blank" rel="external">https://github.com/sssvip/blog-data/blob/master/themes/yilia/layout/_partial/footer.ejs）</a></p><h3 id="14-提交hexo分支上的修改"><a href="#14-提交hexo分支上的修改" class="headerlink" title="14.提交hexo分支上的修改"></a>14.提交hexo分支上的修改</h3><ul><li>1.git status 查看代码修改</li></ul><p>➜ /Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io git:(hexo) ✗ &gt;git status<br>On branch hexo<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)</file></p><pre><code>modified:   _config.ymlmodified:   package.jsonnew file:   &quot;source/_posts/hexo\346\220\255\345\273\272\345\215\232\345\256\242.md&quot;</code></pre><p>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)</file></p><pre><code>themes/hexo-theme-spfk/themes/next/themes/yilia/</code></pre><ul><li><p>2.可以看到，有2个modified,一个new file,还有未被加入本地仓库的文件夹，这3个文件夹是我下载的主题，其中我配置了一些私密信息，比如，百度统计的唯一code、支付宝、微信打赏图片等，我不想上传，如果你想上传，可以使用:[git add .]将所有这个文件夹下的文件提交到本地仓库</p></li><li><p>3.git commit -m “描述”<br>如果这个文件已经提交到了远程仓库，本地做了修改，想再提交到远程仓库，如果只执行 git commit -m “描述” 是不行的，会报如下问题：</p></li></ul><p>➜ /Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io git:(hexo) ✗ &gt;git commit -m “配置说明修改”<br>On branch hexo<br>Changes not staged for commit:<br>        modified:   “source/_posts/hexo\346\220\255\345\273\272\345\215\232\345\256\242.md”</p><p>Untracked files:<br>        themes/hexo-theme-spfk/<br>        themes/next/<br>        themes/yilia/</p><p>no changes added to commit</p><p>说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令，然后再提交</p><ul><li><p>4.如果修改了很多个文件，那么一个个的去[git add 被修改的文件],然后再提交，会很麻烦，所以可以先使用[git status],查看所有未提交的文件，然后把不想提交的文件或者文件夹在[.gitignore]文件中过滤掉，这样的话，就可以直接使用[git add .]将所有未提交的提交到本地仓库</p></li><li><p>5.git push origin hexo</p></li><li><p>6.git pull origin hexo</p></li></ul><h3 id="15-在博客的md文件中，加入截断标签"><a href="#15-在博客的md文件中，加入截断标签" class="headerlink" title="15.在博客的md文件中，加入截断标签"></a>15.在博客的md文件中，加入截断标签</h3><p>如果没有加，一篇博客有多长，就展示多长，我们想要的效果是，在主页每篇博客只显示一部分，点击more后再进入详细页面</p><p>1.在需要截断的地方加入如下标签：<!-- more --></p><p>2.在/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/themes/yilia/_config.yml文件中，加入：<br>excerpt_link: more</p><h3 id="16-给文章设置tag-用于搜索"><a href="#16-给文章设置tag-用于搜索" class="headerlink" title="16 给文章设置tag,用于搜索"></a>16 给文章设置tag,用于搜索</h3><p>每篇生成的博客都有如下格式：可添加多个tag</p><hr><p>title: hexo搭建博客<br>date: 2017-09-10 13:48:42<br>tags:</p><ul><li>tag1</li><li>tag2</li><li>tag3</li></ul><hr><h3 id="17-绑定域名"><a href="#17-绑定域名" class="headerlink" title="17 绑定域名"></a>17 绑定域名</h3><ul><li>1.购买域名，我购买的是阿里云的</li><li>2.域名解析：进入阿里云控制台，点击添加解析，【记录类型：A】【主机记录：@】【解析线路：默认】【记录值：ip(ping alonesingingstar.github.io得到的IP）】，然后保存即可<br>注：记录类型:CNAME , 记录值:alonesingingstar.github.io  是不行的，因为alonesingingstar.github.io不是顶级域名，没有备案的</li><li>3.在alonesingingstar.github.io/source目录下新建CNAME文件，里面内容是你买的域名</li><li>4.重新部署，然后用你的域名访问网站，我的是：<a href="http://alonesingingstar.site" target="_blank" rel="external">http://alonesingingstar.site</a></li></ul><h3 id="18-网站SEO优化"><a href="#18-网站SEO优化" class="headerlink" title="18 网站SEO优化"></a>18 网站SEO优化</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p><a href="http://zhanzhang.baidu.com/college/articleinfo?id=1003" target="_blank" rel="external">http://zhanzhang.baidu.com/college/articleinfo?id=1003</a></p><ul><li>1.进入百度站长平台：<a href="http://zhanzhang.baidu.com/dashboard/index" target="_blank" rel="external">http://zhanzhang.baidu.com/dashboard/index</a></li><li>2.点击添加站点，输入你购买的域名</li><li>3.勾选站点属性</li><li>4.验证网站，我选择的是【CNAME验证】,具体做法：在购买域名的网站（我的是阿里云）进行域名解析：点击添加解析，【记录类型：CNAME】【主机记录：C3bHznfyDD(这个值我乱写的，真实值按百度站长平台提供的来写)】【解析线路：默认】【记录值：zz.baidu.com(必须是这个，之前我写成了我自己的域名)】，然后保存即可</li></ul><p>CNAME验证<br>请将 C3bHznfyDD.alonesingingstar.site 使用CNAME解析到zz.baidu.com<br>完成操作后请点击“完成验证”按钮。<br>为保持验证通过的状态,成功验证后请不要删除该DNS记录</p><p>结果：不到一分钟前alonesingingstar.site使用CNAME验证验证失败，原因：没有找到对应的DNS CNAME记录。<br>问题分析&amp;解决办法： 请检查dns域名指向是否正确，dns生效一般需要几分钟到1天左右，请耐心等待。</p><p>等待一段时间后：</p><p>alonesingingstar.site验证成功！<br>该网站为主站，您可以批量添加子站并查看数据，<br>无需再次验证。帮助</p><ul><li>5.打开百度，搜索 【site:你的域名】，看能不能搜索到</li></ul><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>进入百度统计的管理页面：<a href="https://tongji.baidu.com" target="_blank" rel="external">https://tongji.baidu.com</a><br>点击新增网站，【网站域名：你购买的域名】,其他随便填，然后你点击获取代码,找到如下代码：hm.src = “<a href="https://hm.baidu.com/hm.js?这里是你的唯一code;然后可参照上面" target="_blank" rel="external">https://hm.baidu.com/hm.js?这里是你的唯一code;然后可参照上面</a> 12.配置百度统计（只能后台统计，无法前台展示）的配置</p><p>结果：一直没有统计数据</p><p>可能原因：可能要等一段时间，待验证</p><h3 id="19-生成网站地图"><a href="#19-生成网站地图" class="headerlink" title="19 生成网站地图"></a>19 生成网站地图</h3><ul><li>1.安装插件：npm i hexo-generator-sitemap hexo-generator-baidu-sitemap -S</li><li>2.配置根目录下的_config.yml</li></ul><p>sitemap:<br>    path: sitemap.xml<br>baidusitemap:<br>    path: baidusitemap.xml</p><p>url: <a href="http://alonesingingstar.site/(你的网址" target="_blank" rel="external">http://alonesingingstar.site/(你的网址</a>)<br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:</p><ul><li>3.部署，部署后会生成sitemap.xml、baidusitemap.xml文件（这两者的区别在于 baidusitemap.xml 是百度搜索引擎的专用文件,另一个是通用）</li></ul><h3 id="20-向百度提交链接-在百度站长平台设置"><a href="#20-向百度提交链接-在百度站长平台设置" class="headerlink" title="20 向百度提交链接(在百度站长平台设置)"></a>20 向百度提交链接(在百度站长平台设置)</h3><p><a href="http://zhanzhang.baidu.com/linksubmit/index" target="_blank" rel="external">http://zhanzhang.baidu.com/linksubmit/index</a></p><h4 id="推送方式"><a href="#推送方式" class="headerlink" title="推送方式"></a>推送方式</h4><ul><li>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。</li><li>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。</li><li>4、手动提交：一次性提交链接给百度，可以使用此种方式。</li></ul><p>具体配置方式可以参考百度站长平台/网页抓取/链接提交 中</p><h4 id="推送方式–主动推送"><a href="#推送方式–主动推送" class="headerlink" title="推送方式–主动推送"></a>推送方式–主动推送</h4><ul><li>1.安装插件:npm i hexo-baidu-url-submit -S</li><li><p>2.根目录下配置_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">- type: git</div><div class="line">  repository: git@github.com:aloneSingingStar/aloneSingingStar.github.io.git</div><div class="line">  branch: master</div><div class="line">- type: baidu_url_submitter</div><div class="line">#主动提交链接到百度</div><div class="line">baidu_url_submit:</div><div class="line">  count: 10 # 提交最新的链接数</div><div class="line">  host: alonesingingstar.site # 在百度站长平台中注册的域名,虽然官方推荐要带有 www, 但可以不带.</div><div class="line">  token: 密钥值 # 你的秘钥,每个人都不一样,在百度站长平台/网页抓取/链接提交/自动提交/主动推送 下面可以找到</div><div class="line">  path: baidu_urls.txt # 文本文档的地址,新链接会保存在此文本文档里</div></pre></td></tr></table></figure></li><li><p>3.重新部署，新的链接就会被推送上去<br>部署成功可以看到控制台有如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INFO  Deploying: baidu_url_submitter</div><div class="line">INFO  Submitting urls</div><div class="line">http://alonesingingstar.site/2017/09/10/hexo搭建博客/</div><div class="line">http://alonesingingstar.site/2017/09/09/hello-world/</div><div class="line">&#123;&quot;remain&quot;:4999998,&quot;success&quot;:2&#125;</div><div class="line">INFO  Deploy done: baidu_url_submitter</div></pre></td></tr></table></figure></li></ul><p>到百度站长/站点管理/网页抓取/链接提交 中并没有看到提交的链接，需要等一段时间（可能要一两天），然后使用site:你的域名，才能搜索到<br>具体原因如下：<a href="http://tengj.top/2016/03/14/baidunoshouluresson/" target="_blank" rel="external">http://tengj.top/2016/03/14/baidunoshouluresson/</a></p><p>9/12 下午16:29，使用百度搜索：site:alonesingingstar.site，已经可以搜索到了</p><h3 id="21-向谷歌提交链接"><a href="#21-向谷歌提交链接" class="headerlink" title="21 向谷歌提交链接"></a>21 向谷歌提交链接</h3><p>具体步骤：进入谷歌站长页面（<a href="https://www.google.com/webmasters/，用你的谷歌账户登录，然后点击添加属性，输入你的网址）" target="_blank" rel="external">https://www.google.com/webmasters/，用你的谷歌账户登录，然后点击添加属性，输入你的网址）</a><br>1.下载HTML验证文件（在内容中加入layout: false,网上说hexo会编译这个文件，设置这个不让它编译）<br>2.将该文件放到/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/source目录下。<br>3.重新部署网站<br>4.通过在浏览器中访问 <a href="http://alonesingingstar.site/google2f21809f4cc6b2ea.html" target="_blank" rel="external">http://alonesingingstar.site/google2f21809f4cc6b2ea.html</a> 确认上传成功。<br>6.点击验证<br>7.进入谷歌的Search Console，点击站点地图/添加站点地图,比如我的是<a href="http://alonesingingstar.site/sitemap.xml,添加后就能抓取到" target="_blank" rel="external">http://alonesingingstar.site/sitemap.xml,添加后就能抓取到</a><br>结果：您无权使用此资源。请验证此资源，或请资源所有者将您添加为用户，要等一段时间<br>等一段时间后：<br>恭喜！您已成功验证您对 <a href="http://alonesingingstar.site/" target="_blank" rel="external">http://alonesingingstar.site/</a> 网站的所有权。<br>继续</p><p>使用谷歌搜索：site:alonesingingstar.site，暂时还搜索不到，先等吧</p><p>进入站长页面的Search Console，点击Google抓取工具，点击抓取，一定要请求将网址和链接页编入索引，然后使用site:alonesingingstar.site搜索，就能搜索到了</p><h3 id="22-提升排名"><a href="#22-提升排名" class="headerlink" title="22.提升排名"></a>22.提升排名</h3><ul><li><p>博客根目录 _config.yml 文件进行如下修改，关键字英文逗号隔开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: 网站名称</div><div class="line">description: 网站描述</div><div class="line">author: 作者姓名</div><div class="line">subtitle: 作者简介</div><div class="line">language: zh-CN</div><div class="line">timezone:</div><div class="line">keywords: Web,HTML # 博客关键字</div></pre></td></tr></table></figure></li><li><p>文章中加入关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: ###</div><div class="line">date: ###</div><div class="line">categories: ###</div><div class="line">tags: ###</div><div class="line">keywords: ###</div><div class="line">description: ###</div><div class="line">---</div></pre></td></tr></table></figure></li><li><p>文章路径简化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hexo 默认的文章链接形式为 domain/year/month/day/postname，默认就是一个四级 url，并且可能造成 url 过长，对搜索引擎是十分不友好的。我们可以改成 domain/postname 的形式。编辑站点 _config.yml 文件，修改其中的 permalink 字段改为:</div><div class="line">permalink: :title.html</div></pre></td></tr></table></figure></li></ul><h3 id="23-加入友言评论系统"><a href="#23-加入友言评论系统" class="headerlink" title="23 加入友言评论系统"></a>23 加入友言评论系统</h3><ul><li>1.注册账号：<a href="http://www.uyan.cc/" target="_blank" rel="external">http://www.uyan.cc/</a></li><li>2.注册成功后，可以看到一段代码，复制下来，在/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/themes/yilia/layout/_partial/post下新建uyan.ejs文件,将内容粘贴进去</li><li>3.找到/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/themes/yilia/layout/_partial/article.ejs文件，找到【&lt;% if (!index &amp;&amp; post.comments){ %&gt;】这行代码,在后面加入：【&lt;% if (theme.uyan){ %&gt;&lt;%- partial(‘post/uyan’, {key: post.slug,title: post.title,url: config.url+url_for(post.path)}) %&gt;&lt;% } %&gt; 】</li><li>4.进入后台管理，可以看到你的用户ID，复制这个ID，然后在/Users/aloneSingingStar/xyb/blog/aloneSingingStar.github.io/themes/yilia/_config.yml中加入：uyan: ‘你的ID’</li><li>5.重新部署</li></ul><h3 id="24-博客中引用图片"><a href="#24-博客中引用图片" class="headerlink" title="24 博客中引用图片"></a>24 博客中引用图片</h3><ul><li><p>1._config.xml中开启文章资源文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post_asset_folder: true</div></pre></td></tr></table></figure></li><li><p>2.每次执行 hexo new “文章名字” 生成md文件时，会在同级生成”文章名字”文件夹,将资源放入该文件夹即可</p></li><li><p>3.引用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_img 资源名称 描述 %&#125;</div><div class="line"></div><div class="line">比如：&#123;% asset_img example.jpg This is an example image %&#125;</div><div class="line"></div><div class="line">上面这种方式在网页端访问没有问题，但是手机RSS订阅会有问题，上面那种写法，atom.xml中显示为</div><div class="line">&lt;img src=&quot;/Tigase开发-Tigase服务器搭建/serverConfiguration.gif&quot;&gt;,根本无法访问该链接，</div><div class="line">可以使用如下方式访问：</div><div class="line"></div><div class="line">![ServerConfguration](http://alonesingingstar.site/Tigase开发-Tigase服务器搭建/serverConfiguration.gif)</div><div class="line"></div><div class="line">或者：</div><div class="line"></div><div class="line">&#123;% img http://alonesingingstar.site/Tigase开发-Tigase服务器搭建/serverConfiguration.gif %&#125;</div></pre></td></tr></table></figure></li><li><p>4.修改node_modules/hexo/lib/models/post_asset.js文件<br>将如下代码进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PostAsset.virtual(&apos;path&apos;).get(function() &#123;</div><div class="line">    var Post = ctx.model(&apos;Post&apos;);</div><div class="line">    var post = Post.findById(this.post);</div><div class="line">    if (!post) return;</div><div class="line"></div><div class="line">    // PostAsset.path is file path relative to `public_dir`</div><div class="line">    // no need to urlescape, #1562</div><div class="line">    return pathFn.join(post.path, this.slug);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></li></ul><p>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PostAsset.virtual(&apos;path&apos;).get(function() &#123;</div><div class="line">    var Post = ctx.model(&apos;Post&apos;);</div><div class="line">    var post = Post.findById(this.post);</div><div class="line">    if (!post) return;</div><div class="line">    // PostAsset.path is file path relative to `public_dir`</div><div class="line">    // no need to urlescape, #1562</div><div class="line">      //如果生成的文章路径是以html结尾的, 如:  2016/10/13/byte-order.html,</div><div class="line">      // 则对应的资源路径应该是: 2016/10/13/byte-order + this.slug</div><div class="line">      var reg = new RegExp(&quot;html&quot; + &quot;$&quot;);</div><div class="line">      if(reg.test(post.path)) &#123;</div><div class="line">    var assetPath = post.path.substr(0, post.path.lastIndexOf(&quot;.&quot;));</div><div class="line">    return pathFn.join(assetPath, this.slug);</div><div class="line">      &#125;</div><div class="line">      return pathFn.join(post.path, this.slug);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p><p>如果不改，执行hexo generate时会报错：Error: ENOTDIR: not a directory</p><p>参考(<a href="https://leokongwq.github.io/2016/10/14/hexo-post-asset-folder-html.html" target="_blank" rel="external">https://leokongwq.github.io/2016/10/14/hexo-post-asset-folder-html.html</a>)</p><h3 id="25-yilia主题引入mermaid"><a href="#25-yilia主题引入mermaid" class="headerlink" title="25 yilia主题引入mermaid"></a>25 yilia主题引入mermaid</h3><ul><li><p>1.博客目录下安装hexo-filter-mermaid-diagrams</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -s hexo-filter-mermaid-diagrams</div></pre></td></tr></table></figure></li><li><p>2._config.yml中配置mermaid相关属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mermaid chart</div><div class="line">mermaid: ## mermaid url https://github.com/knsv/mermaid</div><div class="line">  enable: true</div><div class="line">  version: &quot;8.0.0&quot;</div><div class="line">  options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</div><div class="line">    #startOnload: true  // default true</div></pre></td></tr></table></figure></li><li><p>3.主题目录下找到页脚模板文件，themes/yilia/layout/_partials/footer.ejs，在footer.ejs文件最后添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.mermaid.enable %&#125;</div><div class="line">  &lt;script src=&apos;https://unpkg.com/mermaid@&#123;&#123; theme.mermaid.version &#125;&#125;/dist/mermaid.min.js&apos;&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    if (window.mermaid) &#123;</div><div class="line">      mermaid.initialize(&#123;theme: &apos;forest&apos;&#125;);</div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></li></ul><p><strong><em>代码中获取theme.mermaid.version属性</em></strong>可能会出问题，所以可以直接写死为：<a href="https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js" target="_blank" rel="external">https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.mermaid.enable %&#125;</div><div class="line">  &lt;script src=&apos;https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js&apos;&gt;&lt;/script&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    if (window.mermaid) &#123;</div><div class="line">      mermaid.initialize(&#123;theme: &apos;forest&apos;&#125;);</div><div class="line">    &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p><ul><li>4.代码使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% mermaid %&#125;</div><div class="line">graph TD;</div><div class="line">    A--&gt;B;</div><div class="line">    A--&gt;C;</div><div class="line">    B--&gt;D;</div><div class="line">    C--&gt;D;</div><div class="line">&#123;% endmermaid %&#125;</div></pre></td></tr></table></figure></li></ul><p>参考(<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams" target="_blank" rel="external">https://github.com/webappdevelp/hexo-filter-mermaid-diagrams</a>)</p>]]></content>
    
    <summary type="html">
    
      hexo,github搭建个人博客,使用yilia主题,SEO优化
    
    </summary>
    
      <category term="hexo" scheme="https://alonesingingstar.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://alonesingingstar.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://alonesingingstar.github.io/hello-world.html"/>
    <id>https://alonesingingstar.github.io/hello-world.html</id>
    <published>2017-09-09T09:11:24.000Z</published>
    <updated>2017-09-12T12:31:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="default" scheme="https://alonesingingstar.github.io/categories/default/"/>
    
    
      <category term="hello world" scheme="https://alonesingingstar.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
